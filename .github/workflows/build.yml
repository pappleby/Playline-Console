name: Build Playline Console

on:
  push:
    branches: "*"
    tags: "*"
  pull_request:
    branches: "*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Fetch all commits
        run: git fetch --unshallow

      - name: Update version
        id: version
        run: ./get-version.sh

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Package nuget
        run: dotnet pack -p:PackageVersion=${{ steps.version.outputs.SemVer }}

      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal

      - name: Package for Windows
        run: dotnet publish -r win-x64 -c Release --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:PublishTrimmed=True

      - uses: actions/upload-artifact@v4
        name: Upload nuget package
        with:
          name: nuget-package
          path: nupkg/Playline.Console.*.nupkg

      - uses: actions/upload-artifact@v4
        name: Upload Windows build
        with:
          name: plc-win
          path: src/Playline.Console/bin/Release/netcoreapp6.0/win-x64/publish/plc.exe

    outputs:
      builtVersion: ${{ steps.version.outputs.SemVer }}-${{ steps.version.outputs.ShortSha }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v4
        name: Download artifacts
        with:
          path: .

      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v2.2.0

      - name: Read release notes preface
        id: release_preface
        uses: bluwy/substitute-string-action@v3
        with:
          _input-file: .github/RELEASE_TEMPLATE.md
          _format-key: "{key}"
        env:
          INPUT_RELEASE_TAG: ${{ github.ref_name }}
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ needs.build.outputs.builtVersion }}
          draft: true
          prerelease: true
          body: |
            ${{ steps.release_preface.outputs.result }}
            ${{ steps.extract-release-notes.outputs.release_notes }}

      - name: Find and prepare nuget package
        run: |
          # Debug: show what we have
          echo "Current directory structure:"
          find . -name "*.nupkg" -type f
          echo "nuget-package directory contents:"
          ls -la nuget-package/ || echo "nuget-package directory doesn't exist"
          
          # Find the .nupkg file and copy it to the expected location
          mkdir -p nuget-package
          # Use the same version that was used to create the package
          found_file=$(find . -name "Playline.Console.${{ steps.version.outputs.SemVer }}.nupkg" -type f | head -1)
          if [ -n "$found_file" ]; then
            echo "Found file: $found_file"
            cp "$found_file" "./nuget-package/"
          else
            echo "ERROR: Could not find Playline.Console.${{ steps.version.outputs.SemVer }}.nupkg"
            exit 1
          fi
          
          echo "Final nuget-package directory contents:"
          ls -la nuget-package/
      
      - name: Package Windows build
        run: |
          zip --junk-paths plc-win.zip plc-win/plc.exe
      
      - name: Upload nuget package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./nuget-package/Playline.Console.${{ steps.version.outputs.SemVer }}.nupkg
          asset_name: Playline.Console.${{ steps.version.outputs.SemVer }}.nupkg
          asset_content_type: application/nupkg
          
      - name: Upload Windows Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./plc-win.zip
          asset_name: plc-win-${{ needs.build.outputs.builtVersion }}.zip
          asset_content_type: application/zip
